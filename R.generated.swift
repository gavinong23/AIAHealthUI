//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 31 images.
  struct image {
    /// Image `aiavitality_healthrewards`.
    static let aiavitality_healthrewards = Rswift.ImageResource(bundle: R.hostingBundle, name: "aiavitality_healthrewards")
    /// Image `alert`.
    static let alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert")
    /// Image `board_room`.
    static let board_room = Rswift.ImageResource(bundle: R.hostingBundle, name: "board_room")
    /// Image `bronze`.
    static let bronze = Rswift.ImageResource(bundle: R.hostingBundle, name: "bronze")
    /// Image `deductible option`.
    static let deductibleOption = Rswift.ImageResource(bundle: R.hostingBundle, name: "deductible option")
    /// Image `e-wallet`.
    static let eWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "e-wallet")
    /// Image `expand-arrow-down`.
    static let expandArrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "expand-arrow-down")
    /// Image `gold`.
    static let gold = Rswift.ImageResource(bundle: R.hostingBundle, name: "gold")
    /// Image `health wallet boosters`.
    static let healthWalletBoosters = Rswift.ImageResource(bundle: R.hostingBundle, name: "health wallet boosters")
    /// Image `icon_boardroom`.
    static let icon_boardroom = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_boardroom")
    /// Image `icon_dengue`.
    static let icon_dengue = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dengue")
    /// Image `icon_emergency`.
    static let icon_emergency = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_emergency")
    /// Image `icon_extra`.
    static let icon_extra = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_extra")
    /// Image `icon_home`.
    static let icon_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home")
    /// Image `icon_inhospital_blue`.
    static let icon_inhospital_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_inhospital_blue")
    /// Image `icon_inhospital_grey`.
    static let icon_inhospital_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_inhospital_grey")
    /// Image `icon_intensive_care`.
    static let icon_intensive_care = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_intensive_care")
    /// Image `icon_lens`.
    static let icon_lens = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_lens")
    /// Image `icon_microscopes`.
    static let icon_microscopes = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_microscopes")
    /// Image `icon_prevention`.
    static let icon_prevention = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_prevention")
    /// Image `icon_recover`.
    static let icon_recover = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_recover")
    /// Image `icon_surgery`.
    static let icon_surgery = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_surgery")
    /// Image `icon_treatment`.
    static let icon_treatment = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_treatment")
    /// Image `icon_xray`.
    static let icon_xray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_xray")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `platinum`.
    static let platinum = Rswift.ImageResource(bundle: R.hostingBundle, name: "platinum")
    /// Image `silver`.
    static let silver = Rswift.ImageResource(bundle: R.hostingBundle, name: "silver")
    /// Image `status_bronze`.
    static let status_bronze = Rswift.ImageResource(bundle: R.hostingBundle, name: "status_bronze")
    /// Image `status_gold`.
    static let status_gold = Rswift.ImageResource(bundle: R.hostingBundle, name: "status_gold")
    /// Image `status_platinum`.
    static let status_platinum = Rswift.ImageResource(bundle: R.hostingBundle, name: "status_platinum")
    /// Image `status_silver`.
    static let status_silver = Rswift.ImageResource(bundle: R.hostingBundle, name: "status_silver")
    
    /// `UIImage(named: "aiavitality_healthrewards", bundle: ..., traitCollection: ...)`
    static func aiavitality_healthrewards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aiavitality_healthrewards, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "alert", bundle: ..., traitCollection: ...)`
    static func alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alert, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "board_room", bundle: ..., traitCollection: ...)`
    static func board_room(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.board_room, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bronze", bundle: ..., traitCollection: ...)`
    static func bronze(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bronze, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "deductible option", bundle: ..., traitCollection: ...)`
    static func deductibleOption(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deductibleOption, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "e-wallet", bundle: ..., traitCollection: ...)`
    static func eWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eWallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "expand-arrow-down", bundle: ..., traitCollection: ...)`
    static func expandArrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.expandArrowDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gold", bundle: ..., traitCollection: ...)`
    static func gold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gold, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "health wallet boosters", bundle: ..., traitCollection: ...)`
    static func healthWalletBoosters(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.healthWalletBoosters, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_boardroom", bundle: ..., traitCollection: ...)`
    static func icon_boardroom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_boardroom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dengue", bundle: ..., traitCollection: ...)`
    static func icon_dengue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dengue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_emergency", bundle: ..., traitCollection: ...)`
    static func icon_emergency(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_emergency, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_extra", bundle: ..., traitCollection: ...)`
    static func icon_extra(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_extra, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home", bundle: ..., traitCollection: ...)`
    static func icon_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_inhospital_blue", bundle: ..., traitCollection: ...)`
    static func icon_inhospital_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_inhospital_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_inhospital_grey", bundle: ..., traitCollection: ...)`
    static func icon_inhospital_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_inhospital_grey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_intensive_care", bundle: ..., traitCollection: ...)`
    static func icon_intensive_care(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_intensive_care, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_lens", bundle: ..., traitCollection: ...)`
    static func icon_lens(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_lens, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_microscopes", bundle: ..., traitCollection: ...)`
    static func icon_microscopes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_microscopes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_prevention", bundle: ..., traitCollection: ...)`
    static func icon_prevention(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_prevention, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_recover", bundle: ..., traitCollection: ...)`
    static func icon_recover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_recover, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_surgery", bundle: ..., traitCollection: ...)`
    static func icon_surgery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_surgery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_treatment", bundle: ..., traitCollection: ...)`
    static func icon_treatment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_treatment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_xray", bundle: ..., traitCollection: ...)`
    static func icon_xray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_xray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "platinum", bundle: ..., traitCollection: ...)`
    static func platinum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.platinum, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "silver", bundle: ..., traitCollection: ...)`
    static func silver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.silver, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status_bronze", bundle: ..., traitCollection: ...)`
    static func status_bronze(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.status_bronze, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status_gold", bundle: ..., traitCollection: ...)`
    static func status_gold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.status_gold, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status_platinum", bundle: ..., traitCollection: ...)`
    static func status_platinum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.status_platinum, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status_silver", bundle: ..., traitCollection: ...)`
    static func status_silver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.status_silver, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 14 nibs.
  struct nib {
    /// Nib `BenefitsOfHealthRewardView`.
    static let benefitsOfHealthRewardView = _R.nib._BenefitsOfHealthRewardView()
    /// Nib `BenefitsView`.
    static let benefitsView = _R.nib._BenefitsView()
    /// Nib `ExpandablePlanAndBenefitsContainerView`.
    static let expandablePlanAndBenefitsContainerView = _R.nib._ExpandablePlanAndBenefitsContainerView()
    /// Nib `ExpandablePlanAndBenefitsView`.
    static let expandablePlanAndBenefitsView = _R.nib._ExpandablePlanAndBenefitsView()
    /// Nib `ExpandableSectionPlanAndBenefitsTableViewCell`.
    static let expandableSectionPlanAndBenefitsTableViewCell = _R.nib._ExpandableSectionPlanAndBenefitsTableViewCell()
    /// Nib `ExpandedPlanAndBenefitsTableViewCell`.
    static let expandedPlanAndBenefitsTableViewCell = _R.nib._ExpandedPlanAndBenefitsTableViewCell()
    /// Nib `ExpandedPlanAndBenfitsView`.
    static let expandedPlanAndBenfitsView = _R.nib._ExpandedPlanAndBenfitsView()
    /// Nib `HeaderHealthRewardView`.
    static let headerHealthRewardView = _R.nib._HeaderHealthRewardView()
    /// Nib `MainContentHealthRewardView`.
    static let mainContentHealthRewardView = _R.nib._MainContentHealthRewardView()
    /// Nib `MainContentHealthWalletView`.
    static let mainContentHealthWalletView = _R.nib._MainContentHealthWalletView()
    /// Nib `MainContentPlanAndBenefitsView`.
    static let mainContentPlanAndBenefitsView = _R.nib._MainContentPlanAndBenefitsView()
    /// Nib `UsageHealthWalletView`.
    static let usageHealthWalletView = _R.nib._UsageHealthWalletView()
    /// Nib `VitalityStatusBarView`.
    static let vitalityStatusBarView = _R.nib._VitalityStatusBarView()
    /// Nib `VitalityStatusView`.
    static let vitalityStatusView = _R.nib._VitalityStatusView()
    
    /// `UINib(name: "BenefitsOfHealthRewardView", in: bundle)`
    static func benefitsOfHealthRewardView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.benefitsOfHealthRewardView)
    }
    
    /// `UINib(name: "BenefitsView", in: bundle)`
    static func benefitsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.benefitsView)
    }
    
    /// `UINib(name: "ExpandablePlanAndBenefitsContainerView", in: bundle)`
    static func expandablePlanAndBenefitsContainerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.expandablePlanAndBenefitsContainerView)
    }
    
    /// `UINib(name: "ExpandablePlanAndBenefitsView", in: bundle)`
    static func expandablePlanAndBenefitsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.expandablePlanAndBenefitsView)
    }
    
    /// `UINib(name: "ExpandableSectionPlanAndBenefitsTableViewCell", in: bundle)`
    static func expandableSectionPlanAndBenefitsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.expandableSectionPlanAndBenefitsTableViewCell)
    }
    
    /// `UINib(name: "ExpandedPlanAndBenefitsTableViewCell", in: bundle)`
    static func expandedPlanAndBenefitsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.expandedPlanAndBenefitsTableViewCell)
    }
    
    /// `UINib(name: "ExpandedPlanAndBenfitsView", in: bundle)`
    static func expandedPlanAndBenfitsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.expandedPlanAndBenfitsView)
    }
    
    /// `UINib(name: "HeaderHealthRewardView", in: bundle)`
    static func headerHealthRewardView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.headerHealthRewardView)
    }
    
    /// `UINib(name: "MainContentHealthRewardView", in: bundle)`
    static func mainContentHealthRewardView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainContentHealthRewardView)
    }
    
    /// `UINib(name: "MainContentHealthWalletView", in: bundle)`
    static func mainContentHealthWalletView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainContentHealthWalletView)
    }
    
    /// `UINib(name: "MainContentPlanAndBenefitsView", in: bundle)`
    static func mainContentPlanAndBenefitsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainContentPlanAndBenefitsView)
    }
    
    /// `UINib(name: "UsageHealthWalletView", in: bundle)`
    static func usageHealthWalletView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.usageHealthWalletView)
    }
    
    /// `UINib(name: "VitalityStatusBarView", in: bundle)`
    static func vitalityStatusBarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.vitalityStatusBarView)
    }
    
    /// `UINib(name: "VitalityStatusView", in: bundle)`
    static func vitalityStatusView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.vitalityStatusView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `expandableCell`.
    static let expandableCell: Rswift.ReuseIdentifier<ExpandableSectionPlanAndBenefitsTableViewCell> = Rswift.ReuseIdentifier(identifier: "expandableCell")
    /// Reuse identifier `expandedCell`.
    static let expandedCell: Rswift.ReuseIdentifier<ExpandedPlanAndBenefitsTableViewCell> = Rswift.ReuseIdentifier(identifier: "expandedCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `AHealthPlus`.
    static let aHealthPlus = _R.storyboard.aHealthPlus()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "AHealthPlus", bundle: ...)`
    static func aHealthPlus(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.aHealthPlus)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.main` struct is generated, and contains static references to 58 localization keys.
    struct main {
      /// Value: 1. Congenital Conditions  2. Maternity Complications 3. Plastic or cosmetic surgery due to accident or cancer
      static let ahealthplus_healthwallet_usage_hospitalisationtreatment_brief = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_hospitalisationtreatment_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AIA will auto upgrade your Hospital Room and Board amount upon hospital admission, depending on AIA Vitality status.
      static let ahealthplus_healthrewards_hospitalroom_and_board_upgrade_brief = Rswift.StringResource(key: "ahealthplus_healthrewards_hospitalroom_and_board_upgrade_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AIA will increase your Health Wallet every year, depending on AIA Vitality status.
      static let ahealthplus_healthrewards_healthwalletbooster_brief = Rswift.StringResource(key: "ahealthplus_healthrewards_healthwalletbooster_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AIA will waive your Deductible Amount (if any) upon hospital admission, depending on your AIA Vitality status.
      static let ahealthplus_healthrewards_benefits_deductiblewaiver_brief = Rswift.StringResource(key: "ahealthplus_healthrewards_benefits_deductiblewaiver_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Additional medical coverage
      static let ahealthplus_plan_and_benefits_extracare_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_extracare_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All the benefits above shall based on the remaining available amount in the Health Wallet.
      static let ahealthplus_healthwallet_footer = Rswift.StringResource(key: "ahealthplus_healthwallet_footer", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Annual Limit Extra
      static let ahealthplus_healthwallet_usage_annuallimitextra = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_annuallimitextra", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Benefits of Health Rewards
      static let ahealthplus_healthrewards_benefits_title = Rswift.StringResource(key: "ahealthplus_healthrewards_benefits_title", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Covers external prosthetics for artificial limb and hearing aid
      static let ahealthplus_healthwallet_usage_followup_and_recover_mobility_brief = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_followup_and_recover_mobility_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Day Cre Procedure and Surgery
      static let ahealthplus_plan_and_benefits_outpatientcare_surgery = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_surgery", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Deductible Option
      static let ahealthplus_plan_and_benefits_deductibleoption_title = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_deductibleoption_title", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Deductible Waiver
      static let ahealthplus_healthrewards_benefits_deductiblewaiver = Rswift.StringResource(key: "ahealthplus_healthrewards_benefits_deductiblewaiver", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Diagnostic Tests / Specialist Consultation / Medication and Treatment
      static let ahealthplus_plan_and_benefits_outpatientcare_prehospitalisation_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_prehospitalisation_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Diagnostic Tests / Specialist Consultation / Medication and Treatment (inclusive Physiotherapy, Chiropractic and Acupuncture)
      static let ahealthplus_plan_and_benefits_outpatientcare_posthospitalisation_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_posthospitalisation_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Emergency Accidental Out-patient Treatment (inclusive dental) and 30 days follow-up treatment
      static let ahealthplus_plan_and_benefits_outpatientcare_emergency = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_emergency", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Emergency Medical Evacuation and Repatriation
      static let ahealthplus_plan_and_benefits_extracare_emergencymedical = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_extracare_emergencymedical", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Extra Care
      static let ahealthplus_plan_and_benefits_extracare_title = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_extracare_title", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Follow Up and Recover
      static let ahealthplus_healthwallet_usage_followup_and_recover = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_followup_and_recover", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: For cataract or eyes injury
      static let ahealthplus_plan_and_benefits_extracare_intraocularlens_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_extracare_intraocularlens_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: HEALTH REWARD
      static let ahealthplus_healthrewards_title = Rswift.StringResource(key: "ahealthplus_healthrewards_title", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: HEALTH WALLET
      static let ahealthplus_healthwallet_title = Rswift.StringResource(key: "ahealthplus_healthwallet_title", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Health Screening
      static let ahealthplus_healthwallet_usage_prevention_brief = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_prevention_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Health Wallet Booster
      static let ahealthplus_healthrewards_healthwalletbooster = Rswift.StringResource(key: "ahealthplus_healthrewards_healthwalletbooster", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Home Nursing Care
      static let ahealthplus_plan_and_benefits_extracare_homenursingcare = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_extracare_homenursingcare", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hospital Room and Board
      static let ahealthplus_plan_and_benefits_inpatientcare_hospitalroom_and_board = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_inpatientcare_hospitalroom_and_board", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hospital Room and Board Upgrade
      static let ahealthplus_healthrewards_hospitalroom_and_board_upgrade = Rswift.StringResource(key: "ahealthplus_healthrewards_hospitalroom_and_board_upgrade", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hospital supplies and services / surgical fees / operation theatre / anesthetist's fees / in-hospital physician visit / daily guardian benefits
      static let ahealthplus_plan_and_benefits_inpatientcare_inhospitalrelatedfees_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_inpatientcare_inhospitalrelatedfees_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hospitalisation Treatment
      static let ahealthplus_healthwallet_usage_hospitalisationtreatment = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_hospitalisationtreatment", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: How can i use for Health Wallet?
      static let ahealthplus_healthwallet_usage_title = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_title", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: In the event if the annual limit is fully utilized, you may use the total amount available in Health Wallet to pay the remaining meidical cost.
      static let ahealthplus_healthwallet_usage_annuallimitextra_brief = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_annuallimitextra_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: In-Hospital Related Fees
      static let ahealthplus_plan_and_benefits_inpatientcare_inhospitalrelatedfees = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_inpatientcare_inhospitalrelatedfees", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: In-Patient Care
      static let ahealthplus_plan_and_benefits_inpatientcare_title = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_inpatientcare_title", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Intensive Care Unit (ICU)
      static let ahealthplus_plan_and_benefits_inpatientcare_icu = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_inpatientcare_icu", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Intraocular lens
      static let ahealthplus_plan_and_benefits_extracare_intraocularlens = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_extracare_intraocularlens", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Medical covarage if you require medical care or treatment at out-patient department of a hospital.
      static let ahealthplus_plan_and_benefits_inpatientcare_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_inpatientcare_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Medical coverage if you are admitted to hospital for medical treatment or surgery.
      static let ahealthplus_plan_and_benefits_outpatientcare_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Medical treatment at emergency out-patient department or clinic due to an accident
      static let ahealthplus_plan_and_benefits_outpatientcare_emergency_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_emergency_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Medical treatment for cancer, stroke and heart attack (from low to high severity) within 3 years from diagnosis date
      static let ahealthplus_healthwallet_usage_followup_and_recover_recoverycare_brief = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_followup_and_recover_recoverycare_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Medical treatment or surgery at day procedure centre without admission to hospital
      static let ahealthplus_plan_and_benefits_outpatientcare_surgery_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_surgery_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mobility and Hearing Support
      static let ahealthplus_healthwallet_usage_followup_and_recover_mobility = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_followup_and_recover_mobility", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Money will be credited to Health Wallet at the end of the year provided no claim is made in that year.
      static let ahealthplus_healthwallet_totalamount_brief = Rswift.StringResource(key: "ahealthplus_healthwallet_totalamount_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Out-Patient Care
      static let ahealthplus_plan_and_benefits_outpatientcare_title = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_title", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Out-patient Kidney Dialysis and Cancer Treatment
      static let ahealthplus_plan_and_benefits_outpatientcare_outpatientKidneydialysis = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_outpatient-kidneydialysis", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Out-patients Dengue Fever Treatment
      static let ahealthplus_plan_and_benefits_outpatientcare_denguefever = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_denguefever", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PLAN & BENEFITS
      static let ahealthplus_plan_and_benefits_title = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_title", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please refer to your policy contract for the details of each benefits.
      static let ahealthplus_plan_and_benefits_footer = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_footer", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Post-Hospitalisation (within 150 days after hospitalisation)
      static let ahealthplus_plan_and_benefits_outpatientcare_posthospitalisation = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_posthospitalisation", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pre-Hospitalisation (within 60days before hospitalisation)
      static let ahealthplus_plan_and_benefits_outpatientcare_prehospitalisation = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_prehospitalisation", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Prevention
      static let ahealthplus_healthwallet_usage_prevention = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_prevention", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Recovery Care
      static let ahealthplus_healthwallet_usage_followup_and_recover_recoverycare = Rswift.StringResource(key: "ahealthplus_healthwallet_usage_followup_and_recover_recoverycare", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Status:
      static let ahealthplus_plan_and_benefits_status = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_status", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Total Amount
      static let ahealthplus_healthwallet_totalamount = Rswift.StringResource(key: "ahealthplus_healthwallet_totalamount", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Treatment for kidney failure and cancer at out-patient department
      static let ahealthplus_plan_and_benefits_outpatientcare_outpatientKidneydialysis_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_outpatient-kidneydialysis_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Treatment of dengue fever without hospitalisation
      static let ahealthplus_plan_and_benefits_outpatientcare_denguefever_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_outpatientcare_denguefever_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Treatment or therapy required skilled nurse care by a registered nurse to you at home
      static let ahealthplus_plan_and_benefits_extracare_homenursingcare_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_extracare_homenursingcare_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Up to 150 days per year
      static let ahealthplus_plan_and_benefits_inpatientcare_150daysperyear = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_inpatientcare_150daysperyear", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: When you are admitted into hospital, your payable cost will be offset with a deductible amount based on your Vitality status.
      static let ahealthplus_plan_and_benefits_deductibleoption_brief = Rswift.StringResource(key: "ahealthplus_plan_and_benefits_deductibleoption_brief", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YOUR AIA VITALITY STATUS
      static let ahealthplus_healthrewards_vitality_status = Rswift.StringResource(key: "ahealthplus_healthrewards_vitality_status", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: 1. Congenital Conditions  2. Maternity Complications 3. Plastic or cosmetic surgery due to accident or cancer
      static func ahealthplus_healthwallet_usage_hospitalisationtreatment_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_hospitalisationtreatment_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: AIA will auto upgrade your Hospital Room and Board amount upon hospital admission, depending on AIA Vitality status.
      static func ahealthplus_healthrewards_hospitalroom_and_board_upgrade_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthrewards_hospitalroom_and_board_upgrade_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: AIA will increase your Health Wallet every year, depending on AIA Vitality status.
      static func ahealthplus_healthrewards_healthwalletbooster_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthrewards_healthwalletbooster_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: AIA will waive your Deductible Amount (if any) upon hospital admission, depending on your AIA Vitality status.
      static func ahealthplus_healthrewards_benefits_deductiblewaiver_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthrewards_benefits_deductiblewaiver_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Additional medical coverage
      static func ahealthplus_plan_and_benefits_extracare_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_extracare_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: All the benefits above shall based on the remaining available amount in the Health Wallet.
      static func ahealthplus_healthwallet_footer(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_footer", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Annual Limit Extra
      static func ahealthplus_healthwallet_usage_annuallimitextra(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_annuallimitextra", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Benefits of Health Rewards
      static func ahealthplus_healthrewards_benefits_title(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthrewards_benefits_title", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Covers external prosthetics for artificial limb and hearing aid
      static func ahealthplus_healthwallet_usage_followup_and_recover_mobility_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_followup_and_recover_mobility_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Day Cre Procedure and Surgery
      static func ahealthplus_plan_and_benefits_outpatientcare_surgery(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_surgery", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Deductible Option
      static func ahealthplus_plan_and_benefits_deductibleoption_title(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_deductibleoption_title", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Deductible Waiver
      static func ahealthplus_healthrewards_benefits_deductiblewaiver(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthrewards_benefits_deductiblewaiver", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Diagnostic Tests / Specialist Consultation / Medication and Treatment
      static func ahealthplus_plan_and_benefits_outpatientcare_prehospitalisation_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_prehospitalisation_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Diagnostic Tests / Specialist Consultation / Medication and Treatment (inclusive Physiotherapy, Chiropractic and Acupuncture)
      static func ahealthplus_plan_and_benefits_outpatientcare_posthospitalisation_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_posthospitalisation_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Emergency Accidental Out-patient Treatment (inclusive dental) and 30 days follow-up treatment
      static func ahealthplus_plan_and_benefits_outpatientcare_emergency(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_emergency", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Emergency Medical Evacuation and Repatriation
      static func ahealthplus_plan_and_benefits_extracare_emergencymedical(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_extracare_emergencymedical", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Extra Care
      static func ahealthplus_plan_and_benefits_extracare_title(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_extracare_title", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Follow Up and Recover
      static func ahealthplus_healthwallet_usage_followup_and_recover(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_followup_and_recover", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: For cataract or eyes injury
      static func ahealthplus_plan_and_benefits_extracare_intraocularlens_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_extracare_intraocularlens_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: HEALTH REWARD
      static func ahealthplus_healthrewards_title(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthrewards_title", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: HEALTH WALLET
      static func ahealthplus_healthwallet_title(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_title", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Health Screening
      static func ahealthplus_healthwallet_usage_prevention_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_prevention_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Health Wallet Booster
      static func ahealthplus_healthrewards_healthwalletbooster(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthrewards_healthwalletbooster", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Home Nursing Care
      static func ahealthplus_plan_and_benefits_extracare_homenursingcare(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_extracare_homenursingcare", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Hospital Room and Board
      static func ahealthplus_plan_and_benefits_inpatientcare_hospitalroom_and_board(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_inpatientcare_hospitalroom_and_board", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Hospital Room and Board Upgrade
      static func ahealthplus_healthrewards_hospitalroom_and_board_upgrade(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthrewards_hospitalroom_and_board_upgrade", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Hospital supplies and services / surgical fees / operation theatre / anesthetist's fees / in-hospital physician visit / daily guardian benefits
      static func ahealthplus_plan_and_benefits_inpatientcare_inhospitalrelatedfees_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_inpatientcare_inhospitalrelatedfees_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Hospitalisation Treatment
      static func ahealthplus_healthwallet_usage_hospitalisationtreatment(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_hospitalisationtreatment", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: How can i use for Health Wallet?
      static func ahealthplus_healthwallet_usage_title(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_title", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: In the event if the annual limit is fully utilized, you may use the total amount available in Health Wallet to pay the remaining meidical cost.
      static func ahealthplus_healthwallet_usage_annuallimitextra_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_annuallimitextra_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: In-Hospital Related Fees
      static func ahealthplus_plan_and_benefits_inpatientcare_inhospitalrelatedfees(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_inpatientcare_inhospitalrelatedfees", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: In-Patient Care
      static func ahealthplus_plan_and_benefits_inpatientcare_title(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_inpatientcare_title", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Intensive Care Unit (ICU)
      static func ahealthplus_plan_and_benefits_inpatientcare_icu(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_inpatientcare_icu", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Intraocular lens
      static func ahealthplus_plan_and_benefits_extracare_intraocularlens(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_extracare_intraocularlens", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Medical covarage if you require medical care or treatment at out-patient department of a hospital.
      static func ahealthplus_plan_and_benefits_inpatientcare_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_inpatientcare_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Medical coverage if you are admitted to hospital for medical treatment or surgery.
      static func ahealthplus_plan_and_benefits_outpatientcare_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Medical treatment at emergency out-patient department or clinic due to an accident
      static func ahealthplus_plan_and_benefits_outpatientcare_emergency_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_emergency_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Medical treatment for cancer, stroke and heart attack (from low to high severity) within 3 years from diagnosis date
      static func ahealthplus_healthwallet_usage_followup_and_recover_recoverycare_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_followup_and_recover_recoverycare_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Medical treatment or surgery at day procedure centre without admission to hospital
      static func ahealthplus_plan_and_benefits_outpatientcare_surgery_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_surgery_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Mobility and Hearing Support
      static func ahealthplus_healthwallet_usage_followup_and_recover_mobility(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_followup_and_recover_mobility", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Money will be credited to Health Wallet at the end of the year provided no claim is made in that year.
      static func ahealthplus_healthwallet_totalamount_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_totalamount_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Out-Patient Care
      static func ahealthplus_plan_and_benefits_outpatientcare_title(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_title", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Out-patient Kidney Dialysis and Cancer Treatment
      static func ahealthplus_plan_and_benefits_outpatientcare_outpatientKidneydialysis(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_outpatient-kidneydialysis", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Out-patients Dengue Fever Treatment
      static func ahealthplus_plan_and_benefits_outpatientcare_denguefever(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_denguefever", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PLAN & BENEFITS
      static func ahealthplus_plan_and_benefits_title(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_title", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please refer to your policy contract for the details of each benefits.
      static func ahealthplus_plan_and_benefits_footer(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_footer", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Post-Hospitalisation (within 150 days after hospitalisation)
      static func ahealthplus_plan_and_benefits_outpatientcare_posthospitalisation(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_posthospitalisation", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Pre-Hospitalisation (within 60days before hospitalisation)
      static func ahealthplus_plan_and_benefits_outpatientcare_prehospitalisation(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_prehospitalisation", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Prevention
      static func ahealthplus_healthwallet_usage_prevention(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_prevention", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Recovery Care
      static func ahealthplus_healthwallet_usage_followup_and_recover_recoverycare(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_usage_followup_and_recover_recoverycare", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Status:
      static func ahealthplus_plan_and_benefits_status(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_status", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Total Amount
      static func ahealthplus_healthwallet_totalamount(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthwallet_totalamount", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Treatment for kidney failure and cancer at out-patient department
      static func ahealthplus_plan_and_benefits_outpatientcare_outpatientKidneydialysis_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_outpatient-kidneydialysis_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Treatment of dengue fever without hospitalisation
      static func ahealthplus_plan_and_benefits_outpatientcare_denguefever_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_outpatientcare_denguefever_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Treatment or therapy required skilled nurse care by a registered nurse to you at home
      static func ahealthplus_plan_and_benefits_extracare_homenursingcare_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_extracare_homenursingcare_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Up to 150 days per year
      static func ahealthplus_plan_and_benefits_inpatientcare_150daysperyear(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_inpatientcare_150daysperyear", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: When you are admitted into hospital, your payable cost will be offset with a deductible amount based on your Vitality status.
      static func ahealthplus_plan_and_benefits_deductibleoption_brief(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_plan_and_benefits_deductibleoption_brief", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: YOUR AIA VITALITY STATUS
      static func ahealthplus_healthrewards_vitality_status(_: Void = ()) -> String {
        return NSLocalizedString("ahealthplus_healthrewards_vitality_status", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _VitalityStatusBarView.validate()
      try _ExpandablePlanAndBenefitsContainerView.validate()
      try _HeaderHealthRewardView.validate()
      try _UsageHealthWalletView.validate()
    }
    
    struct _BenefitsOfHealthRewardView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BenefitsOfHealthRewardView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _BenefitsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BenefitsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ExpandablePlanAndBenefitsContainerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ExpandablePlanAndBenefitsContainerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "alert", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'alert' is used in nib 'ExpandablePlanAndBenefitsContainerView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ExpandablePlanAndBenefitsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ExpandablePlanAndBenefitsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ExpandableSectionPlanAndBenefitsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ExpandableSectionPlanAndBenefitsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "expandableCell"
      let name = "ExpandableSectionPlanAndBenefitsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ExpandableSectionPlanAndBenefitsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExpandableSectionPlanAndBenefitsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ExpandedPlanAndBenefitsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ExpandedPlanAndBenefitsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "expandedCell"
      let name = "ExpandedPlanAndBenefitsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ExpandedPlanAndBenefitsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExpandedPlanAndBenefitsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ExpandedPlanAndBenfitsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ExpandedPlanAndBenfitsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HeaderHealthRewardView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HeaderHealthRewardView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'info' is used in nib 'HeaderHealthRewardView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "aiavitality_healthrewards", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'aiavitality_healthrewards' is used in nib 'HeaderHealthRewardView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MainContentHealthRewardView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MainContentHealthRewardView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MainContentHealthWalletView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MainContentHealthWalletView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MainContentPlanAndBenefitsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MainContentPlanAndBenefitsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _UsageHealthWalletView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UsageHealthWalletView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '1' is used in nib 'UsageHealthWalletView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VitalityStatusBarView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VitalityStatusBarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "status_bronze", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'status_bronze' is used in nib 'VitalityStatusBarView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VitalityStatusView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VitalityStatusView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct aHealthPlus: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "AHealthPlus"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
